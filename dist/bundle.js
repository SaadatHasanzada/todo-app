(()=>{"use strict";const t=(t,e)=>{localStorage.setItem(t,JSON.stringify(e))},e=t=>{const e=localStorage.getItem(t);return e?JSON.parse(e):null};class s{constructor(){this.tasks=[{id:1,value:"Read a book",completed:!1},{id:2,value:"10 minutes meditation",completed:!0}],this.filter="all",this.listEl=document.getElementById("toDoList"),this.notFound=document.querySelector(".no-item-found"),this.inputEl=document.getElementById("todoInput"),this.allBtns=document.querySelectorAll("#all"),this.activeBtns=document.querySelectorAll("#active"),this.completedBtns=document.querySelectorAll("#completed"),this.filterButtons=document.querySelectorAll(".filter-btn"),this.itemsLeftElement=document.querySelector(".left-items"),this.clearCompleteditemsBtn=document.querySelector(".clear-completed-items"),this.inputEl.addEventListener("keyup",(t=>{const e=this.inputEl.value.trim();e.length&&"Enter"===t.key&&this.addTask(e)})),this.allBtns.forEach((t=>{t.addEventListener("click",(()=>this.setFilter("all")))})),this.activeBtns.forEach((t=>{t.addEventListener("click",(()=>this.setFilter("active")))})),this.completedBtns.forEach((t=>{t.addEventListener("click",(()=>this.setFilter("completed")))})),this.clearCompleteditemsBtn.addEventListener("click",(()=>{this.clearCompletedItems()})),this.loadTasks(),this.loadActiveFilter(),this.render()}addTask(t){const e={id:Date.now(),value:t,completed:!1};this.tasks.push(e),this.inputEl.value="",this.saveTasks(),this.render()}removeTask(t){this.tasks=this.tasks.filter((e=>e.id!==t)),this.saveTasks(),this.render()}toggleTaskCompletion(t){this.tasks=this.tasks.map((e=>e.id===t?Object.assign(Object.assign({},e),{completed:!e.completed}):e)),this.saveTasks(),this.render()}setFilter(t){this.filter=t,this.filterButtons.forEach((e=>{e.id===t?e.classList.add("active"):e.classList.remove("active")})),this.saveActiveFilter(),this.render()}getFilteredTasks(){switch(this.filter){case"active":return this.tasks.filter((t=>!t.completed));case"completed":return this.tasks.filter((t=>t.completed));default:return this.tasks}}updateLeftItems(){const t=this.tasks.filter((t=>!t.completed)).length;this.itemsLeftElement.textContent=`${t} items left`}clearCompletedItems(){this.tasks=this.tasks.filter((t=>!t.completed)),this.saveTasks(),this.render()}saveTasks(){t("tasks",this.tasks)}loadTasks(){const t=e("tasks");t&&(this.tasks=t)}saveActiveFilter(){t("active-category",this.filter)}loadActiveFilter(){const t=e("active-category");this.filter=t||"all",this.setFilter(this.filter)}render(){const t=this.getFilteredTasks();this.listEl.innerHTML="",0===t.length?this.notFound.classList.add("show"):(this.notFound.classList.remove("show"),t.forEach((t=>{const e=document.createElement("li");e.draggable=!0,e.classList.add("todo-item"),e.innerHTML=`\n                          <input class='circle' type="checkbox" ${t.completed?"checked":""}/>\n                          <span class="item">${t.value}</span>\n                   \n                      <button  class="remove-item">\n                          <img src="./images/icon-cross.svg" alt="Cross icon" />\n                      </button>`,e.querySelector("input").addEventListener("click",(()=>{this.toggleTaskCompletion(t.id)})),e.querySelector("button").addEventListener("click",(()=>{this.removeTask(t.id)})),e.addEventListener("dragstart",(e=>this.dragStartHandler(e,t.id))),e.addEventListener("drop",(e=>this.dropHandler(e,t.id))),e.addEventListener("dragover",(t=>this.dragOverHandler(t))),this.listEl.appendChild(e)}))),this.updateLeftItems()}dragStartHandler(t,e){var s;null===(s=t.dataTransfer)||void 0===s||s.setData("text/plain",`${e}`||""),t.dataTransfer.effectAllowed="move"}dropHandler(t,e){var s;t.preventDefault();const i=null===(s=t.dataTransfer)||void 0===s?void 0:s.getData("text/plain");if(i&&i!==e.toString()){const t=this.tasks.findIndex((t=>t.id.toString()===i)),s=this.tasks.findIndex((t=>t.id===e)),[a]=this.tasks.splice(t,1);this.tasks.splice(s,0,a),this.saveTasks(),this.render()}}dragOverHandler(t){t.preventDefault()}}class i{constructor(){this.targetElement=document.body,this.switchButton=this.targetElement.querySelector(".toggle-icon"),this.switchButton.addEventListener("click",(()=>{this.toggleTheme()})),this.loadTheme()}toggleTheme(){const e=this.targetElement.classList.toggle("dark-mode");t("theme",e?"dark":"light")}loadTheme(){"dark"===(e("theme")||"light")?this.targetElement.classList.add("dark-mode"):this.targetElement.classList.remove("dark-mode")}}document.addEventListener("DOMContentLoaded",(()=>{new s,new i}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,